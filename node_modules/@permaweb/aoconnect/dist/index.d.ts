export const result: import("./lib/result/index.js").ReadResult;
export const results: import("./lib/results/index.js").ReadResults;
export const message: import("./lib/message/index.js").SendMessage;
export const spawn: import("./lib/spawn/index.js").SpawnProcess;
export const monitor: import("./lib/monitor/index.js").SendMonitor;
export const unmonitor: import("./lib/unmonitor/index.js").SendMonitor;
export const dryrun: import("./lib/dryrun/index.js").DryRun;
export const assign: import("./lib/assign/index.js").Assign;
export const connect: {
    ({ GRAPHQL_URL, GRAPHQL_MAX_RETRIES, GRAPHQL_RETRY_BACKOFF, GATEWAY_URL, MU_URL, CU_URL, fetch, originalFetch }?: {
        /**
         * - the url of the desried Gateway.
         */
        GATEWAY_URL?: string;
        /**
         * - the url of the desired Arweave Gateway GraphQL Server
         */
        GRAPHQL_URL?: string;
        /**
         * - the number of times to retry querying the gateway, utilizing an exponential backoff
         */
        GRAPHQL_MAX_RETRIES?: number;
        /**
         * - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
         */
        GRAPHQL_RETRY_BACKOFF?: number;
        /**
         * - the url of the desried ao Messenger Unit.
         */
        MU_URL?: string;
        /**
         * - the url of the desried ao Compute Unit.
         */
        CU_URL?: string;
    }): {
        result: import("./lib/result/index.js").ReadResult;
        results: import("./lib/results/index.js").ReadResults;
        message: import("./lib/message/index.js").SendMessage;
        spawn: import("./lib/spawn/index.js").SpawnProcess;
        monitor: import("./lib/monitor/index.js").SendMonitor;
        unmonitor: import("./lib/unmonitor/index.js").SendMonitor;
        dryrun: import("./lib/dryrun/index.js").DryRun;
        assign: import("./lib/assign/index.js").Assign;
        createDataItemSigner: (wallet: any) => import("./dal.js").Types["signer"];
    };
    hb({ wallet, URL, fetch: originalFetch, ...rest }: {
        /**
         * - the url of the desried Gateway.
         */
        GATEWAY_URL?: string;
        /**
         * - the url of the desired Arweave Gateway GraphQL Server
         */
        GRAPHQL_URL?: string;
        /**
         * - the number of times to retry querying the gateway, utilizing an exponential backoff
         */
        GRAPHQL_MAX_RETRIES?: number;
        /**
         * - the initial backoff, in milliseconds (moot if GRAPHQL_MAX_RETRIES is set to 0)
         */
        GRAPHQL_RETRY_BACKOFF?: number;
        /**
         * - the url of the desried ao Messenger Unit.
         */
        MU_URL?: string;
        /**
         * - the url of the desried ao Compute Unit.
         */
        CU_URL?: string;
    } & {
        /**
         * - the wallet to use to sign HyperBEAM HTTP messages
         */
        wallet: any;
        /**
         * the HyperBEAM node
         */
        URL?: string;
    }): Omit<ReturnType</*elided*/ any>, "createDataItemSigner"> & {
        createDataItemSigner: () => import("./dal.js").Types["signer"];
    };
};
import { serializeCron } from './index.common.js';
export const createDataItemSigner: (wallet: any) => import("./dal.js").Types["signer"];
export { serializeCron };

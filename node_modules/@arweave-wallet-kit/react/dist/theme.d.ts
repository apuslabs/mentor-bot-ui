/// <reference types="react" />
import { ThemingType } from "@callstack/react-theme-provider";
import { ThemeConfig } from "@arweave-wallet-kit/core/theme";
export declare const lightTheme: DisplayTheme;
export declare const darkTheme: DisplayTheme;
export interface DisplayTheme {
    background: string;
    primaryText: string;
    secondaryText: string;
    light: string;
}
export interface DefaultTheme extends DisplayTheme {
    displayTheme: "dark" | "light";
    theme: string;
    themeConfig: ThemeConfig;
}
export interface Theming extends ThemingType<DefaultTheme> {
    ThemeProvider: React.ComponentType<React.PropsWithChildren<{
        children: React.ReactNode;
        theme?: DefaultTheme;
    }>>;
}
export declare const ThemeProvider: import("react").ComponentType<{
    children: import("react").ReactNode;
    theme?: DefaultTheme | undefined;
}>, useTheme: <T = DefaultTheme>(overrides?: import("@callstack/react-theme-provider").$DeepPartial<T> | undefined) => T;
export declare const withTheme: <Props extends {
    theme: DefaultTheme;
}, C>(WrappedComponent: import("react").ComponentType<Props> & C) => import("react").ComponentType<import("@callstack/react-theme-provider").$Without<Props, "theme"> & {
    theme?: import("@callstack/react-theme-provider").$DeepPartial<DefaultTheme> | undefined;
}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Props> & C, {}>;
export declare const unifyClassNames: (...classNames: string[]) => string;
